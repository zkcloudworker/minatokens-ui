datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

generator client {
  provider = "prisma-client-js"
}

enum Plan {
  free
  premium
  test
}

enum Chain {
  mina_mainnet
  mina_devnet
  zeko_mainnet
  zeko_devnet
}

model APIKey {
  address     String          @id
  email       String          @db.VarChar(255)
  name        String          @db.VarChar(255)
  discord     String?         @db.VarChar(100)
  createdAt   DateTime        @default(now())
  plan        Plan            @default(free)
  chains      APIKeyChain[]
  proofs      APIKeyProofs[]
  jobData     JobData[]       @relation("APIKeyToJobData")
  revokedKeys RevokedKeys?
  apiKeyCalls APIKeyCalls[]
  history     APIKeyHistory[]

  @@index([email])
  @@index([plan])
  @@index([address])
  @@index([discord])
}

model RevokedKeys {
  address String   @id
  apiKey  APIKey   @relation(fields: [address], references: [address], onDelete: Cascade)
  reason  String
  time    DateTime @default(now())
}

model AddressBlacklist {
  address String   @id
  reason  String
  time    DateTime @default(now())
}

model EmailBlacklist {
  email  String   @id
  reason String
  time   DateTime @default(now())
}

model DiscordBlacklist {
  discord String   @id
  reason  String
  time    DateTime @default(now())
}

model APIKeyChain {
  address   String
  chain     Chain
  activated Boolean
  apiKey    APIKey  @relation(fields: [address], references: [address], onDelete: Cascade)

  @@id([address, chain])
  @@index([address])
  @@index([chain])
  @@index([activated])
}

model APIKeyHistory {
  address String
  email   String
  discord String?
  time    DateTime @default(now())
  apiKey  APIKey   @relation(fields: [address], references: [address], onDelete: Cascade)

  @@id([address, time])
  @@index([address])
  @@index([email])
  @@index([discord])
  @@index([time])
}

model APIKeyCalls {
  id      String   @id @default(cuid())
  address String
  chain   Chain
  endpoint String
  status  Int
  error   String?
  time    DateTime @default(now())
  apiKey  APIKey   @relation(fields: [address], references: [address], onDelete: Cascade)

  @@index([address])
  @@index([chain])
  @@index([time])
}

model APIKeyProofs {
  address String
  chain   Chain
  jobId   String   @unique
  time    DateTime @default(now())
  apiKey  APIKey   @relation(fields: [address], references: [address], onDelete: Cascade)
  jobData JobData  @relation(fields: [jobId], references: [jobId], onDelete: Cascade)

  @@id([address, chain, jobId])
  @@index([address])
  @@index([jobId])
  @@index([chain])
  @@index([time])
}

model JobData {
  jobId          String        @id
  address        String?
  apiKey         APIKey?       @relation("APIKeyToJobData", fields: [address], references: [address], onDelete: Cascade)
  proofs         APIKeyProofs? @relation()
  id             String
  taskId         String?
  developer      String
  repo           String
  task           String?
  userId         String?
  args           String?
  metadata       String?
  chain          Chain
  filename       String?
  txNumber       Int
  timeCreated    DateTime      @default(now())
  timeStarted    DateTime?
  timeFinished   DateTime?
  timeFailed     DateTime?
  timeUsed       DateTime?
  jobStatus      String
  billedDuration Int?
  result         String?
  logStreams     Json?
  logs           String[]
  isFullLog      Boolean?

  @@index([chain])
  @@index([jobId])
  @@index([timeCreated])
  @@index([jobStatus])
  @@index([chain, jobStatus])
}
